{"version":3,"sources":["common/global-vars.js","components/closest-asteroids/closest-asteroids.js","components/home/home.js","components/asteroid-details/asteroid-details.js","components/geomagnetic/geomagnetic.js","index.js"],"names":["apiKey","Date","toLocaleDateString","replace","closestAsteroidsPath","moment","format","geoMagneticStormPath","subtract","ClosestAsteroidsComponent","props","state","Asteroids","Asteroid","handleAsteroid","bind","fetch","Global","then","res","json","setState","JSON","stringify","this","near_earth_objects","responseObject","console","log","className","map","b","key","id","to","pathname","asteroid","name","React","Component","HomeComponent","apod","apodImage","hdurl","url","homeStyleMain","backgroundImage","height","width","position","style","AsteroidDetailComponent","location","pontentialHazard","is_potentially_hazardous_asteroid","maxDiameter","parseFloat","estimated_diameter","meters","estimated_diameter_max","toFixed","minDiameter","estimated_diameter_min","missingDistanceKm","close_approach_data","miss_distance","kilometers","missingDistanceLunar","lunar","relativeVelocityKMH","relative_velocity","kilometers_per_hour","close_approach_date_full","GeomagneticComponent","Georesponse","ReactDOM","render","path","component","exact","document","getElementById"],"mappings":"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","file":"static/js/main.9e578912.chunk.js","sourcesContent":["import moment from 'moment'\r\n\r\nvar cday = new Date();\r\nvar today = cday.toLocaleDateString().replace(/\\//g, \"-\");\r\n\r\nexport const apiKey = 'A8QOwQlPLCc2EYkcNhYxj1SZKIHh83v6tkp55y7e';\r\nexport const apodPath = 'https://api.nasa.gov/planetary/apod?api_key=';\r\nexport const closestAsteroidsPath = `https://api.nasa.gov/neo/rest/v1/feed?start_date=${moment().format('YYYY-MM-DD')}&end_date=${moment().format('YYYY-MM-DD')}&api_key=${apiKey}`;\r\n\r\n//PS: This Api only returns value for large amount of times (5 months before the current date is used in this case)\r\nexport const geoMagneticStormPath = `https://api.nasa.gov/DONKI/GST?startDate=${moment().subtract(5,'month').format('YYYY-MM-DD')}&endDate=${moment().format('YYYY-MM-DD')}&api_key=${apiKey}`;\r\nexport const todayformatClosestAsteroid = today;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Global from '../../common/global-vars'\r\nimport './closest-asteroids.css'\r\n\r\nclass ClosestAsteroidsComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Asteroids: {},\r\n            Asteroid: []\r\n        };\r\n        this.handleAsteroid = this.handleAsteroid.bind(this);\r\n    }\r\n    \r\n\r\n    // Fetching the API and grabbing the JSON object\r\n    componentDidMount() {\r\n        fetch(Global.closestAsteroidsPath)\r\n            .then(res => res.json())\r\n            .then(Asteroids => this.setState({ Asteroids }));\r\n    }\r\n\r\n    handleAsteroid(){\r\n        if(JSON.stringify(this.state.Asteroids) === '{}'){\r\n            return [];\r\n        }\r\n        else{\r\n            var AsteroidsArray = this.state.Asteroids.near_earth_objects['2020-01-02'];\r\n            return AsteroidsArray;\r\n        }\r\n    }\r\n\r\n\r\n    // Rendering the list of objects to HTML\r\n    render() {\r\n        //console.log(`${JSON.stringify(this.state.Asteroids, null, 2)}`);\r\n        var responseObject = this.handleAsteroid();\r\n        console.log(`RESPONSE NASA RENDER: ${JSON.stringify(responseObject, null, 2)}`);\r\n        return (\r\n            <div className=\"bodyDiv\">\r\n            <h1></h1>\r\n                {this.handleAsteroid().map(b =>\r\n                    <div key={b.id} className='columnBodyCA'>\r\n                        <Link to={{\r\n                            pathname: '/asteroiddetails',\r\n                            state: {asteroid: b}\r\n                        }}>\r\n                            <div className='columnBodyHome'>{b.name}</div>\r\n                        </Link>\r\n                    </div>\r\n                )} \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClosestAsteroidsComponent;\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport * as Global from '../../common/global-vars'\r\nimport './home.css'\r\nimport AsteroidsList from '../closest-asteroids/closest-asteroids'\r\nimport moment from 'moment'\r\n\r\n\r\nclass HomeComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apod: {},\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch(`${Global.apodPath}${Global.apiKey}`)\r\n            .then(res => res.json())\r\n            .then(apod => this.setState({ apod }));\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        var apodImage = \"\";\r\n        if(this.state.apod != null &&  this.state.apod.hdurl != null){\r\n            apodImage = this.state.apod != null ? this.state.apod.hdurl : '';\r\n        }\r\n        else if(this.state.apod != null){\r\n            apodImage = this.state.apod.url;\r\n        }\r\n\r\n        var homeStyleMain = {\r\n            backgroundImage : `url(${apodImage})`,\r\n            height: `1080px`,\r\n            width: `1920px`,\r\n            position: `absolute`\r\n        };\r\n\r\n        console.log(`${apodImage}`);\r\n        return (\r\n            <div style={homeStyleMain} >\r\n            <h1 className=\"homeTitle\">Closest Asteroids to Earth on {moment().format('LLLL')}</h1>\r\n                <AsteroidsList />\r\n                {/* <img src={apodImage} alt='apodimage' className='imgDiv' /> */}\r\n\r\n                {/* <Link to={{\r\n                            pathname: '/asteroids',\r\n                }}>Nearest Asteroids</Link> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default HomeComponent;","import React from 'react';\r\nimport './asteroid-details.css'\r\n\r\nclass AsteroidDetailComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n\r\n    // Fetching the API and grabbing the JSON object\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        let { asteroid } = this.props.location.state;\r\n        var pontentialHazard = asteroid.is_potentially_hazardous_asteroid ? \"Yes\" : \"No\";\r\n        var maxDiameter = parseFloat(asteroid.estimated_diameter.meters.estimated_diameter_max).toFixed(2);\r\n        var minDiameter = parseFloat(asteroid.estimated_diameter.meters.estimated_diameter_min).toFixed(2);\r\n        var missingDistanceKm = parseFloat(asteroid.close_approach_data[0].miss_distance.kilometers).toFixed(2);\r\n        var missingDistanceLunar = parseFloat(asteroid.close_approach_data[0].miss_distance.lunar).toFixed(2);\r\n        var relativeVelocityKMH = parseFloat(asteroid.close_approach_data[0].relative_velocity.kilometers_per_hour).toFixed(2);\r\n\r\n\r\n        console.log(JSON.stringify(asteroid, null, 2));\r\n        return (\r\n            <div className='bodyDetails'>\r\n                <div className='containerDetails'>\r\n                    <h1>Name: {asteroid.name}</h1>\r\n                    <h1>Is a potentially Hazard ? {pontentialHazard}</h1>\r\n                    <h2>Closest approach date: {asteroid.close_approach_data[0].close_approach_date_full}</h2>\r\n                    <h2>Estimated minimum diameter: {minDiameter}m</h2>\r\n                    <h2>Estimated maximum diameter: {maxDiameter}m</h2>\r\n                    <h2>Missing distance: {missingDistanceKm}km or {missingDistanceLunar} times the distance from moon</h2>\r\n                    <h2>Relative speed: {relativeVelocityKMH}km/h</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AsteroidDetailComponent;\r\n","import React from 'react';\r\nimport * as Global from '../../common/global-vars'\r\n\r\nclass GeomagneticComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            Georesponse: {}\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        //PS: This Api only returns value for large amount of times (5 months before the current date is used in this case)\r\n        //reducing this time might carry to empty response\r\n        fetch(Global.geoMagneticStormPath)\r\n            .then(res => res.json())\r\n            .then(Georesponse => this.setState({ Georesponse }));\r\n    }\r\n\r\n    render() {\r\n        console.log(`${JSON.stringify(this.state.Georesponse, null, 2)}`);\r\n        return (\r\n            <div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GeomagneticComponent;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport HomeComponent from './components/home/home';\nimport ClosestAsteroidsComponent from './components/closest-asteroids/closest-asteroids';\nimport AsteroidDetailComponent from './components/asteroid-details/asteroid-details';\nimport GeomagneticComponent from './components/geomagnetic/geomagnetic';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Route path={'/'} component={HomeComponent} exact />\n        <Route path={'/asteroids'} component={ClosestAsteroidsComponent} exact/>\n        <Route path={'/asteroiddetails'} component={AsteroidDetailComponent} />\n        <Route path={'/geomagnetic'} component={GeomagneticComponent} />\n    </BrowserRouter>\n\n, document.getElementById('root'));\n\n"],"sourceRoot":""}